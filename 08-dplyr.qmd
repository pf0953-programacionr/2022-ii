---
title: "dplyr - gramática para manipulación de datos"
---

## Trabajo previo

### Lecturas

Wickham, H., & Grolemund, G. (2017). *R for Data Science: Import, Tidy, Transform, Visualize, and Model Data (1st ed.)*. O'Reilly Media. <https://r4ds.had.co.nz/>

## Resumen
En este capítulo se estudia el paquete `dplyr` de Tidyverse.

## Características generales
El paquete [dplyr](https://dplyr.tidyverse.org/) de [Tidyverse](https://www.tidyverse.org/) es descrito como una *"gramática para la manipulación de datos, la cual proporciona un conjunto consistente de verbos que ayuda a solucionar los retos de manipulación de datos más comunes"*. Los principales "verbos" (i.e. funciones) de esta gramática son:

* [select()](https://dplyr.tidyverse.org/reference/select.html): selecciona columnas con base en sus nombres.

* [filter()](https://dplyr.tidyverse.org/reference/filter.html): selecciona filas con base en sus valores.

* [arrange()](https://dplyr.tidyverse.org/reference/arrange.html): cambia el orden de las filas.

* [mutate()](https://dplyr.tidyverse.org/reference/mutate.html): crea nuevas columnas, las cuales se expresan como funciones de columnas existentes.

* [summarise()](https://dplyr.tidyverse.org/reference/summarise.html): agrupa y resume valores.

Todas estas operaciones pueden combinarse con la función [group_by()](https://dplyr.tidyverse.org/reference/group_by.html), la cual ejecuta cualquiera de las operaciones anteriores "en grupo". Además, dplyr proporciona [funciones adicionales](https://dplyr.tidyverse.org/reference/index.html) para tareas más específicas.

Todas las funciones de dplyr trabajan de manera similar:

1. El primer argumento es un data frame. Puede omitirse si la función recibe el data frame a través del operador *pipe*.
2. Los argumentos siguientes describen que hacer con el data frame, utilizando los nombres de las columnas (sin comillas).  
3. El resultado es un nuevo data frame.

Las funciones de `dplyr` pueden encadenarse a través del operador *pipe* (tubo), ya sea el del paquete magrittr [(%\>%)](https://magrittr.tidyverse.org/reference/pipe.html) o el del paquete base de R [(\|\>)](https://michaelbarrowman.co.uk/post/the-new-base-pipe/). Los procesos se enlazan con *pipes* para formar *pipelines* (tuberías).

## Instalación y carga
El paquete `dplyr` pueden instalarse junto con todos los demás paquete de Tidyverse o de manera individual:

```{r}
#| label: instalacion-dplyr
#| eval: false

# Instalación conjunta de Tidyverse
install.packages("tidyverse")

# Instalación individual
install.packages("dplyr")
```

Una vez instalado,  `dplyr` puede cargarse con la función `library()`:

```{r}
#| label: carga-dplyr
#| message: false

# Carga conjunta de Tidyverse
library(tidyverse)

# Carga individual
library(dplyr)
```

## Conjuntos de datos de ejemplo
Para los ejemplos de este capítulo, se utiliza el paquete de datos [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/).

```{r}
#| label: carga-palmerpenguins
#| message: false

# Carga del paquete de datos palmerpenguins
library(palmerpenguins)
```

Estructura del conjunto de datos `penguins`:

```{r}
#| label: estructura-palmerpenguins

# Estructura del paquete de datos palmerpenguins
glimpse(penguins)
```

Vista del conjunto de datos `penguins`:

```{r vista-palmerpenguins, eval=FALSE}
#| label: vista-palmerpenguins
#| eval: false

# Vista del paquete de datos palmerpenguins
View(penguins)
```

## Funciones

### select()
La función `select()` selecciona (y opcionalmente renombra) columnas de un data frame con base en sus nombres.

```{r}
#| label: select-ejemplo-01

# Selección de las columnas de especie, longitud del pico y sexo
penguins |>
  select(species, bill_length_mm, sex)
```

Cambio de nombres de columnas:

```{r}
#| label: select-ejemplo-02

# Selección y cambio de nombre de las columnas de especie, longitud del pico y sexo
penguins |>
  select(especie = species,
         longitud_pico_mm = bill_length_mm,
         sexo = sex)
```

El operador `:` permite seleccionar un rango de columnas continuas:

```{r}
#| label: select-ejemplo-03

# Selección de las columnas en el rango de species a flipper_length_mm
penguins |>
  select(species:flipper_length_mm)
```

Selección de todas las columnas que cumplen una condición:

```{r}
#| label: select-ejemplo-04

# Selección de las columnas numéricas
penguins |>
  select(where(is.numeric))
```

### filter()
La función `filter()` retorna un subconjunto de un data frame con todas las filas que satisfacen una condición (i.e. expresión lógica).

Ejemplos de uso de expresiones y operadores lógicos:

```{r}
#| label: filter-ejemplo-01

# Filas de la especie 'Adelie' con longitud del pico mayor o igual a 45 mm
penguins |>
  filter(species == 'Adelie' & bill_length_mm >= 45)
```

```{r}
#| label: filter-ejemplo-02

# Filas de la especie 'Adelie' o 'Gentoo'
penguins |>
  filter(species == 'Adelie' | species == 'Gentoo')
```

```{r}
#| label: filter-ejemplo-04

# Filas de especies diferentes a 'Chinstrap'
penguins |>
  filter(!(species == 'Chinstrap'))
```

```{r}
#| label: filter-ejemplo-06

# Filas con longitud del pico mayor o igual al promedio
#   El argumento lógico na.rm de mean() indica si los valores NA ("not available") 
#   deben ser removidos antes del cálculo
penguins |>
  filter(bill_length_mm >= mean(bill_length_mm, na.rm = TRUE))
```

Condiciones relacionadas con valores `NA`:

```{r}
#| label: filter-ejemplo-07

# Filas con valor NA en la columna sex
penguins |>
  select(species, island, sex) %>%
  filter(is.na(sex))
```

La función `drop_na()` remueve las filas con valores `NA` en una o varias columnas.

```{r}
#| label: filter-ejemplo-08

# Filas con valor diferente a NA en la columna sex
penguins |>
  select(species,
         bill_length_mm,
         bill_depth_mm,
         flipper_length_mm,
         body_mass_g,
         sex) %>%
  drop_na(sex)
```

```{r}
#| label: filter-ejemplo-09

# Filas con valor diferente a NA en cualquier columna
penguins |>
  select(species,
         bill_length_mm,
         bill_depth_mm,
         flipper_length_mm,
         body_mass_g,
         sex) %>%
  drop_na()
```

### arrange()
La función `arrange()` cambia el orden de las filas de un data frame de acuerdo con los valores de las columnas seleccionadas.

```{r}
#| label: arrange-ejemplo-01

# Ordenamiento ascendente por las columnas 'bill_lenght_mm' y 'bill_depth_mm'
penguins |>
  arrange(bill_length_mm, bill_depth_mm)
```

Por defecto, las columnas se ordenan de manera acendente. Si se desea un orden descendente, puede utilizarse la función `desc()`.

```{r}
#| label: arrange-ejemplo-02

# Ordenamiento descendente por las columnas 'bill_lenght_mm' y 'bill_depth_mm'
penguins |>
  arrange(desc(bill_length_mm), desc(bill_depth_mm))
```

Nótese que los valores `NA` se ubican al final de cualquier ordenamiento.

La función `across()` aplica una función en múltiples columnas.

```{r}
#| label: arrange-ejemplo-03

# Ordenamiento ascendente por las columnas que empiezan con 'bill'
penguins |>
  arrange(across(starts_with('bill')))
```

```{r}
#| label: arrange-ejemplo-04

# Ordenamiento ascendente por las columnas que contienen la hilera 'lenght'
penguins |>
  arrange(across(contains('length')))
```

### mutate()
La función `mutate()` crea o modifica columnas en un data frame.

```{r}
#| label: mutate-ejemplo-01

# Creación de la columna 'body_mass_kg' con el valor de 'body_mass_g' expresado en kg
penguins |>
  select(species, body_mass_g) |>
  mutate(body_mass_kg = body_mass_g/1000)
```

```{r}
#| label: mutate-ejemplo-02

# Creación de la columnas 'body_mass_g_mean' (promedio de masa) 
# y 'body_mass_g_normalized' (proporción con respecto al promedio)
penguins |>
  select(species, body_mass_g) |>
  mutate(body_mass_g_mean = mean(body_mass_g, na.rm = TRUE)) |>
  mutate(body_mass_g_normalized = body_mass_g / body_mass_g_mean)
```

La función `group_by()` agrupa una o más columnas.

```{r}
#| label: mutate-ejemplo-03

# Creación de la columnas 'body_mass_g_mean_species' (promedio de masa de la especie) 
# y 'body_mass_g_species_normalized' (proporción con respecto al promedio de masa de la especie)
penguins |>
  select(species, body_mass_g) |>
  group_by(species) |>
  mutate(body_mass_g_mean_species = mean(body_mass_g, na.rm = TRUE)) |>
  mutate(body_mass_g_species_normalized = body_mass_g / body_mass_g_mean_species)
```

### summarise()
La función `summarise()` crea un nuevo data frame con una (o más filas), correspondientes a combinaciones de las columnas usadas en una agrupación. Esta función frecuentemente se usa en combinación con `group_by()`. Si no hay agrupación, se retorna una sola fila que sumariza todas las observaciones de la entrada.

Sumarización sin agrupamiento:

```{r}
#| label: summarise-ejemplo-01

# Creación de un data frame con las columnas sumarizadas 'body_mass_g_mean' (promedio de masa) 
# y 'n' (cantidad de individuos)
penguins |>
  summarise(body_mass_g_mean = mean(body_mass_g, na.rm = TRUE),
            n = n())
```

La función [n()](https://dplyr.tidyverse.org/reference/context.html) cuenta la cantidad de filas en un grupo.

Sumarización con agrupamiento:

```{r}
#| label: summarise-ejemplo-02

# Creación de un data frame con las columnas sumarizadas de mínimo, máximo y promedio de masa,
# y cantidad de individuos para cada especie
penguins |>
  group_by(species) |>
  summarise(
    body_mass_g_min = min(body_mass_g, na.rm = TRUE),
    body_mass_g_max = max(body_mass_g, na.rm = TRUE),
    body_mass_g_mean = mean(body_mass_g, na.rm = TRUE),
    n = n()
  )
```

### Otras

#### count()
Una forma alternativa (a `summarise()`) de realizar un conteo es con la función [count()](https://dplyr.tidyverse.org/reference/count.html):

```{r}
#| label: otras-ejemplo-01

# Creación de un data frame con el conteo de individuos por especie
penguins |>
  count(species)
```

## Ejercicios
1. En el data frame `penguins`, cree:
    - Una columna llamada "body_mass_g_mean_species_sex" con el promedio de masa para la especie y el sexo a los que pertenece cada individuo.
    - Una columna llamada "body_mass_g_species_sex_normalized" con la proporción de la masa de cada individuo con respecto al promedio de masa para la especie y el sexo a los que pertenece.
    
2. Agrupe el data frame `penguins` por especie y sexo y obtenga el promedio de masa y la cantidad de individuos para cada grupo.

## Recursos de interés
RStudio. (2017). *Data transformation with dplyr::Cheat Sheet*. [https://github.com/rstudio/cheatsheets/blob/45c1e642468695830fd8b724587ccfe8901e2185/data-transformation.pdf](https://github.com/rstudio/cheatsheets/blob/45c1e642468695830fd8b724587ccfe8901e2185/data-transformation.pdf)